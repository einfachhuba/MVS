# 3 wegen gezogene Schüler
# P(k = 3) = (9 3) * p**3 * (1-p)**6
p <- (1/9+1/8+1/7)
(prob <- (factorial(9))/(factorial(3)*factorial((9-3))) * p**3 * (1-p)**6)
##  Task 2  ##
# Package davor installieren
library(UsingR)
data(father.son)
# Task 2.1  #
# Classentyp
class(father.son)
# Welche Dimension
dim(father.son)
# Schauen nach fehlende Werte
sum(is.na(father.son))
# Task 2.2  #
# Höhe in inch zu centimeters (1 inch = 2.54 cm)
father.son$fheight <- father.son$fheight * 2.54
father.son$sheight <- father.son$sheight * 2.54
# Sortieren (ascending)
father.son <- father.son[order(father.son$fheight), ]
# Task 2.3  #
# Scatterplot
plot(father.son$fheight, father.son$sheight,
xlab = "Height father (cm)",
ylab = "Height son (cm)",
main = "Höhen Scatterplot",
type = "p",
xlim = c(150, 200),
ylim = c(150, 200),
pch = 1, # Punkttyp
cex = 1  # Punktgröße
)
n <- 10
result <- 1
for (i in 1:n) {
term <- prod((seq(2, by = 2, length.out = i))) / prod((seq(3, by = 2, length.out = i)))
result <- result + term
}
(result)
a <- choose(9, 3)
b <- choose(8, 2)
c <- (a - b)
c <- (a / b)
c <- (b / a)
p <- (1/9)
(prob <- (factorial(9))/(factorial(3)*factorial((9-3))) * p**3 * (1-p)**6)
p <- (3/9)
(prob <- (factorial(9))/(factorial(3)*factorial((9-3))) * p**3 * (1-p)**6)
help("ISLR")
library(ISLR)
help("ISLR")
help(ISLR)
cls
clear()
##  Task 3 ##
library(ISLR)
# Task 3.1  #
data("Auto")
dim(Auto)
sum(is.na(Auto))
##  Task 3 ##
library(ISLR)
# Task 3.1  #
data("Auto")
dim(Auto)
sum(is.na(Auto))
##  Task 3 ##
library(ISLR)
# Task 3.1  #
data("Auto")
dim(Auto)
sum(is.na(Auto))
# Task 3.3  #
# Kovarianz
cov_matrix <- cov(Auto[, 1:6])
# Korrelation
cor_matrix <- cor(Auto[, 1:6])
print(cor_matrix)
plot(Auto$weight, Auto$mpg,
xlab = "Weight",
ylab = "Meilen pro Gallon",
main = "Meilen pro Gallon gegen Weight")
lm_model <- lm(mpg ~ weight, data = Auto)
rmse <- sqrt(mean(lm_model$residuals^2))
(lm_model <- lm(mpg ~ weight, data = Auto))
rmse <- sqrt(mean(lm_model$residuals^2))
cat("Root-Mean-Square Error (RMSE):", rmse, "\n")
# Task 3.5  #
Auto$liters100 <- 235.21 / Auto$mpg
# neue Scatterplot
plot(Auto$weight, Auto$liters100,
xlab = "Weight",
ylab = "Liter pro 100 km",
main = "Liter pro 100 km gegen Weight")
lm_model_liters <- lm(liters100 ~ weight, data = Auto)
# Berechnung R_square
r_squared <- summary(lm_model_liters)$r.squared
cat("R²:", r_squared, "\n")
# Berechnung RMSE
rmse_liters <- sqrt(mean(lm_model_liters$residuals^2))
cat("RMSE für Liter pro 100 km:", rmse_liters, "\n")
set.seed(55)
red_wines <- read.table("Exercise_3\\red_wines.csv", header = TRUE, sep = ";", dec = ".")
getWd()
getwd()
setwd("C:\\FH\\Semester5\\MVS")
red_wines <- read.table("Exercise_3\\red_wines.csv", header = TRUE, sep = ";", dec = ".")
white_wines <- read.table("Exercise_3\\white_wines.csv", header = TRUE, sep = ";", dec = ".")
dim(red_wines)
dim(white_wines)
### Task 1.2
# combine the two data frames into one data frame
wines <- rbind(red_wines, white_wines)
wines$type <- c(rep("red", nrow(red_wines)), rep("white", nrow(white_wines)))
wines$type <- as.factor(wines$type)
head(wines, 2)
tail(wines, 2)
dim(wines)
### Task 1.3
# wine amount by type
table(wines$type)
### Task 1.4
# spliting into training and test data with approximately same ratio of red and white wines
train <- wines[sample(nrow(wines), 0.75 * nrow(wines)), ]
test <- wines[!(rownames(wines) %in% rownames(train)), ]
table(train$type)
table(test$type)
### Task 1.5
# classification tree with all variables except quality
# install.packages("rpart")
library(rpart)
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.1, minbucket = 1))
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
(wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
(wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
# accuracy of white wines
(wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ]))
# accuracy of red wines
(wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ]))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test), method = "class", control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance", xlab = "Importance", ylab = "Variable", horiz = TRUE)
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance", xlab = "Importance", ylab = "Variable", horiz = FALSE)
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
#Umbrüche der Variablennamen
names.arg = c("Sulphates", "Alcohol", "Total sulfur dioxide", "Chlorides", "Fixed acidity", "Density", "Free sulfur dioxide", "pH", "Residual sugar", "Volatile acidity", "Citric acid")
)
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("Total sulfur dioxide", "Free sulfur dioxide", "Chlorides", "Volatile acidity", "Citric acid", "Fixed acidity")
)
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("Total sulfur diox.", "Free sulfur diox.", "Chlorides", "Volatile acidity", "Citric acid", "Fixed acidity")
)
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("Total SO2", "Free SO2", "Chlorides", "Volatile acidity", "Citric acid", "Fixed acidity")
)
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = 0.05, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.05, minbucket = 1))
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
(wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
(wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
# accuracy of white wines
(wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ]))
# accuracy of red wines
(wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ]))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("Total SO2", "Free SO2", "Chlorides", "Volatile acidity",
"Citric acid", "Fixed acidity"))
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("Total SO2", "Chlorides", "Free SO2", "Volatile acidity",
"Fixed acidity", "Citric acid", "Density", "Sulphates", "Residual Sugar", "PH"))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.1, minbucket = 1))
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
(wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
(wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
# accuracy of white wines
(wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ]))
# accuracy of red wines
(wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ]))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("Total SO2", "Free SO2", "Chlorides", "Volatile acidity",
"Citric acid", "Fixed acidity"))
fancyRpartPlot(wines_tree_all, sub = "")
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.05, minbucket = 1))
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
(wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
(wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
# accuracy of white wines
(wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ]))
# accuracy of red wines
(wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ]))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V. acidity",
"F. acid", "C. acid", "Density", "Sulphate",
"R. Sugar", "pH"))
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V. acid",
"F. acid", "C. acid", "Density", "Sulphate",
"R. Sugar", "pH"))
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V. acid",
"F. acid", "C. acid", "Density", "Sulph.",
"R. Sugar", "pH"))
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V. acid",
"F. acid", "C. acid", "Density", "Sulph.",
"Sugar", "pH"))
fancyRpartPlot(wines_tree_all, sub = "")
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.001, minbucket = 1))
wines_tree$cptable
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
set.seed(55)
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.001, minbucket = 1))
wines_tree$cptable
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
(wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
(wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
# accuracy of white wines
(wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ]))
# accuracy of red wines
(wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ]))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.02, minbucket = 1))
wines_tree$cptable
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
(wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
(wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
# accuracy of white wines
(wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ]))
# accuracy of red wines
(wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ]))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
attr(wines_tree_all$terms, "term.labels")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V. acid",
"F. acid", "C. acid", "Density", "Sulph.",
"Sugar", "pH"))
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.01, minbucket = 1))
wines_tree$cptable
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
(wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
(wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test))
# accuracy of white wines
(wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ]))
# accuracy of red wines
(wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ]))
### Task 1.7
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
attr(wines_tree_all$terms, "term.labels")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V. acid",
"F. acid", "C. acid", "Density", "Sulph.",
"Sugar", "pH", "Alc."))
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V.acid",
"F.acid", "C.acid", "Dens.", "Sulph.",
"Sugar", "pH", "Alc."))
set.seed(55)
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.005, minbucket = 1))
# cptable of the model
wines_tree$cptable
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
### Task 1.6
# prediction on test data
set.seed(55)
wines_tree_pred <- predict(wines_tree, test, type = "class")
# confusion matrix
table(wines_tree_pred, test$type)
# accuracy and missclassification of the model
wines_tree_accuracy <- sum(diag(table(wines_tree_pred, test$type))) / nrow(test)
cat("Accuracy of the model: ", wines_tree_accuracy, "\n")
wines_tree_mclsfcn <- 1 - sum(diag(table(wines_tree_pred, test$type))) / nrow(test)
cat("Missclassification of the model: ", wines_tree_mclsfcn, "\n")
# accuracy of white wines
wines_white_accuracy <- sum(diag(table(wines_tree_pred, test$type))[1]) / sum(table(wines_tree_pred, test$type)[1, ])
cat("Accuracy of white wines predictions: ", wines_white_accuracy, "\n")
# accuracy of red wines
wines_red_accuracy <- sum(diag(table(wines_tree_pred, test$type))[2]) / sum(table(wines_tree_pred, test$type)[2, ])
cat("Accuracy of red wines predictions: ", wines_red_accuracy, "\n")
### Task 1.7
set.seed(55)
wines_tree_all <- rpart(type ~ . - quality, data = rbind(train, test),method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp, minbucket = 1))
# plot the tree
# install.packages("rattle")
library(rattle)
fancyRpartPlot(wines_tree_all, sub = "")
attr(wines_tree_all$terms, "term.labels")
# which predictor variables are actually used in the classification tree
wines_tree_all$variable.importance
# plot the variable importance in a barplot
barplot(wines_tree_all$variable.importance, main = "Variable Importance",
xlab = "Importance", ylab = "Variable", horiz = FALSE,
names.arg = c("TSO2", "Cl", "FSO2", "V.acid",
"F.acid", "C.acid", "Dens.", "Sulph.",
"Sugar", "pH", "Alc."))
fancyRpartPlot(wines_tree_all, sub = "")
# xstd from the lowest xerror
(std <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "xstd"])
# get the cp of the least complex tree where the xerror is within one standard error of the lowest xerror
(opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= min(wines_tree$cptable[, "xerror"]) + std), "CP"][1])
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.005, minbucket = 1))
# cptable of the model
wines_tree$cptable
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
# xstd from the lowest xerror
(std <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "xstd"])
# get the cps which are within the std of the lowest xerror
opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= opt_cp + std), "CP"]
# if there are more then one cp, then take the highest cp
if (length(opt_cp_2) > 1) {
opt_cp_2 <- max(opt_cp_2)
}
opt_cp_2
# get the cps which are within the std of the lowest xerror
opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= opt_cp + std), "CP"]
# xstd from the lowest xerror
(std <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "xstd"])
# get the cps which are within the std of the lowest xerror
opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= opt_cp + std), "CP"]
# get the cps which are within the std of the lowest xerror
(opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= opt_cp + std), "CP"])
set.seed(55)
wines_tree <- rpart(type ~ . - quality, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0.005, minbucket = 1))
# cptable of the model
wines_tree$cptable
(opt_cp <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "CP"])
# xstd from the lowest xerror
(std <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "xstd"])
# get the cps which are within the std of the lowest xerror
opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= min(wines_tree$cptable[, "xerror"]) + std), "CP"]
# if there are more then one cp, then take the highest cp
if (length(opt_cp_2) > 1) {
opt_cp_2 <- max(opt_cp_2)
}
opt_cp_2
# get the cps which are within the std of the lowest xerror
(opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= min(wines_tree$cptable[, "xerror"]) + std), "CP"])
# get the cps which are within the std of the lowest xerror
(opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] < min(wines_tree$cptable[, "xerror"]) + std), "CP"])
# if there are more then one cp, then take the highest cp
if (length(opt_cp_2) > 1) {
opt_cp_2 <- max(opt_cp_2)
}
opt_cp_2
# get the cps which are within the std of the lowest xerror
(opt_cp_2 <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= min(wines_tree$cptable[, "xerror"]) + std), "CP"])
# if there are more then one cp, then take the highest cp
if (length(opt_cp_2) > 1) {
opt_cp_2 <- max(opt_cp_2)
}
opt_cp_2
# xstd from the lowest xerror
(std <- wines_tree$cptable[which.min(wines_tree$cptable[, "xerror"]), "xstd"])
### Task 2.2
# get the cps which are within the std of the lowest xerror
(opt_cp_1se <- wines_tree$cptable[which(wines_tree$cptable[, "xerror"] <= min(wines_tree$cptable[, "xerror"]) + std), "CP"])
# if there are more then one cp, then take the highest cp (more simple tree)
if (length(opt_cp_1se) > 1) {
opt_cp_1se <- max(opt_cp_1se)
}
# create the tree with the opt_cp_1se
set.seed(55)
wines_tree_1se <- rpart(type ~ . - quality, data = rbind(train, test), method = "class",
control = rpart.control(minsplit = 2, cp = opt_cp_1se, minbucket = 1))
# plot the tree
fancyRpartPlot(wines_tree_1se, sub = "")
fancyRpartPlot(wines_tree_all, sub = "")
# plot the tree
fancyRpartPlot(wines_tree_1se, sub = "")
